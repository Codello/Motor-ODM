name: Continuous Integration
on: push

jobs:
  lint:
    name: Lint Code Style
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.8'
      - name: Install Dependencies
        run: pip install .[dev,typing]
      - name: Run Black
        run: invoke black --check
      - name: Run Flake8
        run: invoke flake8
      - name: Run isort
        run: invoke isort --check
      - name: Run MyPy
        run: invoke mypy

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.8'
      - name: Install Dependencies
        run: pip install .[dev]
      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.2.0
        with:
          mongodb-version: 4.2
      - name: Run Pytest
        run: invoke test

  build:
    name: Build Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          # We need to fetch all commits up to the last tag to read the correct version number
          fetch-depth: 50
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.8'
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U pep517
      - name: Build Package
        run: python -m pep517.build .
        env:
          SKIP_CYTHON: 1
      - name: Upload Artifacts
        uses: actions/upload-artifact@v1
        with:
          name: PyPI Files
          path: dist

  deploy:
    name: Deploy to PyPI
    needs: [lint, test, build]
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install Dependencies
        run: pip install twine
      - name: Get Build Artifacts
        uses: actions/download-artifact@v1
        with:
          name: PyPI Files
          path: dist
      - name: Validate Build Artifacts
        run: twine check dist/*
      - name: Upload to PyPI
        run: twine upload --non-interactive dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.pypi_token }}
